package com.academia.authservice.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.academia.authservice.models.User;
import com.academia.authservice.service.UserService;

/**
 * REST controller para autenticação 
 * END points para metodos GET,POST, DELETE e PUT
 * 
 * Autor: Pedro Henrique Cândido
 * Data: 11/04/2025
 */
@RestController
@RequestMapping("/auth")
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Retorna todos os usuários cadastrados
     * Endpoint: GET /auth/users
     */
    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.findAll();
        return ResponseEntity.ok(users);
    }

    /**
     * Realiza o cadastro de um novo usuário
     * Endpoint: POST /auth/register
     * Body esperado: JSON com email, senha e role
     */
    @PostMapping("/register")
    public ResponseEntity<User> register(@RequestBody User user) {
        User created = userService.save(user);
        return ResponseEntity.ok(created);
    }

    /**
     * Endpoint de login (ainda será implementado com validação e JWT)
     * Endpoint: POST /auth/login
     */
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        // 1. Buscar usuário pelo email
        User user = userService.findByEmail(request.getEmail());

        if (user == null || !passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Email ou senha inválidos");
        }

        // 2. Gerar token JWT
        String token = jwtUtil.generateToken(user.getEmail());

        // 3. Retornar o token
        return ResponseEntity.ok(new JwtResponse(token));
    }
}
