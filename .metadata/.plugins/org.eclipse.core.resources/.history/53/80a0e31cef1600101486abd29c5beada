package com.academia.authservice.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.academia.authservice.DTO.AuthRequest;
import com.academia.authservice.DTO.AuthResponse;
import com.academia.authservice.models.User;
import com.academia.authservice.security.JwtUtil;
import com.academia.authservice.service.UserService;

/**
 * Controlador REST responsável pela autenticação e gerenciamento de usuários.
 * <p>
 * Endpoints disponíveis:
 * - GET /auth/users : Lista todos os usuários
 * - POST /auth/register : Cadastra um novo usuário
 * - POST /auth/login : Realiza login e gera token JWT
 * </p>
 *
 * @author Pedro Henrique
 * @since 11/04/2025
 */
@RestController
@RequestMapping("/auth")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;
    
    

    /**
     * Lista todos os usuários cadastrados no sistema.
     *
     * @return Lista de usuários em formato JSON.
     */
    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.findAll();
        return ResponseEntity.ok(users);
    }

    /**
     * Cadastra um novo usuário no sistema.
     *
     * @param user Objeto JSON contendo email, senha e role do usuário.
     * @return Objeto do usuário criado com status 200 OK.
     */
    @PostMapping("/register")
    public ResponseEntity<User> register(@RequestBody User user) {
        User created = userService.save(user);
        return ResponseEntity.ok(created);
    }

    /**
     * Realiza o login do usuário e retorna um token JWT em caso de sucesso.
     *
     * @param request Objeto contendo email e senha do usuário.
     * @return Token JWT em caso de autenticação bem-sucedida, ou 401 UNAUTHORIZED.
     */
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody AuthRequest request) {
        Optional<User> optionalUser = userService.findByEmail(request.getEmail());

        if (optionalUser.isEmpty() || !passwordEncoder.matches(request.getPassword(), optionalUser.get().getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Email ou senha inválidos");
        }

        User user = optionalUser.get();
        String token = jwtUtil.generateToken(user.getEmail());

        return ResponseEntity.ok(new AuthResponse(token));
    }

}

